(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";jQuery(document).ready(function(t){function e(e){e.preventDefault(),l.removeClass("slide-in").find("li").show(),f.removeClass("move-left"),t("body").removeClass("cd-overlay")}function s(){a(),o()}function a(){var e=t(".cd-faq").offset().top,s=jQuery(".cd-faq").height()-jQuery(".cd-faq-categories").height();if(e-20<=t(window).scrollTop()&&e-20+s>t(window).scrollTop()){var a=i.offset().left;i.width();i.addClass("is-fixed").css({left:a,top:20,"-moz-transform":"translateZ(0)","-webkit-transform":"translateZ(0)","-ms-transform":"translateZ(0)","-o-transform":"translateZ(0)",transform:"translateZ(0)"})}else if(e-20+s<=t(window).scrollTop()){var o=e-20+s-t(window).scrollTop();i.css({"-moz-transform":"translateZ(0) translateY("+o+"px)","-webkit-transform":"translateZ(0) translateY("+o+"px)","-ms-transform":"translateZ(0) translateY("+o+"px)","-o-transform":"translateZ(0) translateY("+o+"px)",transform:"translateZ(0) translateY("+o+"px)"})}else i.removeClass("is-fixed").css({left:0,top:0})}function o(){r.each(function(){var e=t(this),s=parseInt(t(".cd-faq-title").eq(1).css("marginTop").replace("px","")),a=t('.cd-faq-categories a[href="#'+e.attr("id")+'"]');(a.parent("li").is(":first-child")?0:Math.round(e.offset().top))-20<=t(window).scrollTop()&&Math.round(e.offset().top)+e.height()+s-20>t(window).scrollTop()?a.addClass("selected"):a.removeClass("selected")})}var r=t(".cd-faq-group"),n=t(".cd-faq-trigger"),l=t(".cd-faq-items"),i=t(".cd-faq-categories"),d=i.find("a"),f=t(".cd-close-panel");d.on("click",function(e){e.preventDefault();var s=t(this).attr("href"),a=t(s);t(window).width()<768?(l.scrollTop(0).addClass("slide-in").children("ul").removeClass("selected").end().children(s).addClass("selected"),f.addClass("move-left"),t("body").addClass("cd-overlay")):t("body,html").animate({scrollTop:a.offset().top-19},200)}),t("body").bind("click touchstart",function(s){(t(s.target).is("body.cd-overlay")||t(s.target).is(".cd-close-panel"))&&e(s)}),l.on("swiperight",function(t){e(t)}),n.on("click",function(e){e.preventDefault(),t(this).next(".cd-faq-content").slideToggle(200).end().parent("li").toggleClass("content-visible")}),t(window).on("scroll",function(){t(window).width()>1024&&(window.requestAnimationFrame?window.requestAnimationFrame(s):s())}),t(window).on("resize",function(){t(window).width()<=1024&&i.removeClass("is-fixed").css({"-moz-transform":"translateY(0)","-webkit-transform":"translateY(0)","-ms-transform":"translateY(0)","-o-transform":"translateY(0)",transform:"translateY(0)"}),i.hasClass("is-fixed")&&i.css({left:l.offset().left})})});

},{}],2:[function(require,module,exports){
"use strict";var $grid=$(".our-classes").isotope({}),filterFns={numberGreaterThan50:function(){var t=$(this).find(".number").text();return parseInt(t,10)>50},ium:function(){return $(this).find(".name").text().match(/ium$/)}};$(".filter-button-group").on("click","a",function(){var t=$(this).attr("data-filter");t=filterFns[t]||t,$grid.isotope({filter:t})}),$(".button-group").each(function(t,i){var e=$(i);e.on("click","a",function(){e.find(".is-checked").removeClass("is-checked"),$(this).addClass("is-checked")})});

},{}],3:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}var _TeacherCard=require("./vue/TeacherCard.js"),_TeacherCard2=_interopRequireDefault(_TeacherCard),_Expander=require("./vue/Expander.js"),_Expander2=_interopRequireDefault(_Expander),_filter=require("./filter.js"),_filter2=_interopRequireDefault(_filter),_faq=require("./faq.js"),_faq2=_interopRequireDefault(_faq);(new WOW).init(),$(document).ready(function(){$(".mobile-menu-trigger").on("click",function(){$(".mobile-menu--overlay").addClass("open")}),$(".close-menu").on("click",function(){$(".mobile-menu--overlay").removeClass("open")})});

},{"./faq.js":1,"./filter.js":2,"./vue/Expander.js":4,"./vue/TeacherCard.js":5}],4:[function(require,module,exports){
"use strict";Vue.component("Expander",{template:'\n        <div class="Expander">\n            <div class="Expander__trigger" \n                @click="open=!open" \n                :class="open?\'active\':\'beforeBorder\'">\n                <svg \n                    class="Expander__trigger-Icon" \n                    :class="{open:open}" \n                    width="40" height="12" \n                    stroke="cornflowerblue">\n                    <polyline points="12,2 20,10 28,2" stroke-width="3" fill="none"></polyline>\n                </svg>\n                {{ title }}\n            </div>\n            <transition :name="animation">\n                <div class="Expander__body" v-show="open">\n                    <slot></slot>\n                </div>\n            </transition>\n        </div>\n    ',props:{title:{type:String,default:"title"},animation:{type:String,default:"rightToLeft"}},data:function(){return{open:!1}}});var vm=new Vue({el:".expanderSection",data:{},computed:{},methods:{},mounted:function(){}});

},{}],5:[function(require,module,exports){
"use strict";Vue.component("teachercard",{template:'\n        <div class="card teacher-card">\n            <div class="teacher-card-image">\n                <slot></slot>\n            </div>\n            <div class=teacher-card-info>\n                <h2>{{ teacher }}</h2>\n                <p>{{ title }}</p>\n            </div>\n            <div class="teacher-card-read-more">\n                <hr>\n                  <div class="teacher-card-read-more_link">\n                    <a href="#">Read More</a>\n                  </div>\n                <hr>\n            </div>\n        </div>\n    ',props:{teacher:{type:String,default:"teacher"},title:{type:String,default:"title"},animation:{type:String,default:"rightToLeft"}},data:function(){return{}}});var vm=new Vue({el:".teacher-cards",data:{},computed:{},methods:{},mounted:function(){}});

},{}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
